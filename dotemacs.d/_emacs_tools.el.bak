;; -*- mode: Emacs-Lisp -*-
;; Time-stamp: <2004-03-09 21:34:59 Yu Li>

;;{{{ iswitchb : fast switching buffers support
(require 'iswitchb)
(iswitchb-default-keybindings)
;;}}}

;;{{{ ispell : spell checking for emacs
(setenv "DICTDIR" "d:/emacs/ispell/lib")
;;}}}

;;{{{ dictionary : dictionary service support
(autoload 'dictionary-search "dictionary" 
  "Ask for a word and search it in all dictionaries" t)
(autoload 'dictionary-match-words "dictionary"
  "Ask for a word and search all matching words in the dictionaries" t)
(autoload 'dictionary-lookup-definition "dictionary" 
  "Unconditionally lookup the word at point." t)
(autoload 'dictionary "dictionary"
  "Create a new dictionary buffer" t)
(autoload 'dictionary-mouse-popup-matching-words "dictionary"
  "Display entries matching the word at the cursor" t)
(autoload 'dictionary-popup-matching-words "dictionary"
  "Display entries matching the word at the point" t)
(autoload 'dictionary-tooltip-mode "dictionary"
  "Display tooltips for the current word" t)
(unless (boundp 'running-xemacs)
  (autoload 'global-dictionary-tooltip-mode "dictionary"
    "Enable/disable dictionary-tooltip-mode for all buffers" t))
;; key bindings
(global-set-key "\C-cs" 'dictionary-search)
(global-set-key "\C-cm" 'dictionary-match-words)
;;}}}

;;{{{ browse-kill-ring : clipboard history support
(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)
;;}}}

;;{{{ table : WYSIWYG table editing support
(require 'table)
;;}}}

;;{{{ recentf : recent open files support
(require 'recentf)
(setq recentf-save-file "~/.emacs.d/_recentf")
(recentf-mode 1)

(defun recentf-open-files-compl ()
  (interactive)
  (let* ((all-files recentf-list)
    (tocpl (mapcar (function 
      (lambda (x) (cons (file-name-nondirectory x) x))) all-files))

(prompt (append '("File name: ") tocpl))
(fname (completing-read (car prompt) (cdr prompt) nil nil)))
(find-file (cdr (assoc-ignore-representation fname tocpl)))))
(global-set-key [(control x)(control r)] 'recentf-open-files-compl)
;;}}}

;;{{{ tabbar : tab bar support
(require 'tabbar)
(tabbar-mode)
(global-set-key (kbd "") 'tabbar-backward-group)
(global-set-key (kbd "") 'tabbar-forward-group)
(global-set-key (kbd "") 'tabbar-backward)
(global-set-key (kbd "") 'tabbar-forward)
;;}}}

;;{{{ wb-line-number : window based line number display support
(require 'wb-line-number)
(set-scroll-bar-mode nil)
;;}}}

;;{{{ tab-display : display tab characters
(require 'tab-display)
(setq tab-display-tab-width 4)
;;}}}

;;{{{ htmlize : convernt emacs font locked buffer into html code
(require 'htmlize)
;;}}}

;;{{{ AUCText : A much enhanced LaTeX mode for GNU Emacs.
(require 'tex-site)
;;}}}

;;{{{ Store cursorposition _fast_ in a register.
(global-set-key [(control ?\.)] 'ska-point-to-register)
(global-set-key [(control ?\,)] 'ska-jump-to-register)
(defun ska-point-to-register()
  "Store cursorposition _fast_ in a register. 
Use ska-jump-to-register to jump back to the stored 
position."
  (interactive)
  (setq zmacs-region-stays t)
  (point-to-register 8))

(defun ska-jump-to-register()
  "Switches between current cursorposition and position
that was stored with ska-point-to-register."
  (interactive)
  (setq zmacs-region-stays t)
  (let ((tmp (point-marker)))
        (jump-to-register 8)
        (set-register 8 tmp)))
;;}}}

;;{{{ hippie-expand : for more convenience auto completion
(global-set-key [(meta ?/)] 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(try-expand-line
        try-expand-line-all-buffers
        try-expand-list
        try-expand-list-all-buffers
        try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name
        try-complete-file-name-partially
        try-complete-lisp-symbol
        try-complete-lisp-symbol-partially
        try-expand-whole-kill))
;;}}}

;;{{{ folding : add folding feature to editor

(load-library  "folding")
(declare (special fold-fold-on-startup
                  fold-keys-already-setup
                  ))
    
(setq fold-fold-on-startup t)
(folding-mode-add-find-file-hook)

(setq fold-keys-already-setup nil)
(add-hook 'folding-mode-hook
  (function (lambda()
    (unless fold-keys-already-setup
      (setq fold-keys-already-setup t)
      (define-prefix-command 'ctl-f-folding-mode-prefix)
      (define-key 'ctl-f-folding-mode-prefix "f" 'fold-fold-region)
      (define-key  'ctl-f-folding-mode-prefix "e" 'fold-enter)
      (define-key 'ctl-f-folding-mode-prefix "x" 'fold-exit)
      (define-key  'ctl-f-folding-mode-prefix "b" 'fold-whole-buffer)
      (define-key 'ctl-f-folding-mode-prefix "o" 'fold-open-buffer)
      (define-key 'ctl-f-folding-mode-prefix "h" 'fold-hide)
      (define-key 'ctl-f-folding-mode-prefix "s" 'fold-show)
      (define-key 'ctl-f-folding-mode-prefix "t" 'fold-top-level)
      (define-key 'ctl-f-folding-mode-prefix "f" 'fold-fold-region)
      )
    (local-set-key "\C-f" 'ctl-f-folding-mode-prefix))))

(fold-add-to-marks-list 'sgml-mode
                        "<!-- {" 
                        "<!-- } -->" " --> ")
(fold-add-to-marks-list 'c-mode "/* <" "/* > */" "*/")
(fold-add-to-marks-list 'c++-mode
                        "//<" "//>" "")
(fold-add-to-marks-list 'LaTeX-mode "%%% {{{" "%%% }}}" " ")
(fold-add-to-marks-list 'latex2e-mode "%%% {{{" "%%% }}}" " ")
(fold-add-to-marks-list 'latex-mode "%%% {{{" "%%% }}}" " ")
(fold-add-to-marks-list 'BibTeX-mode "%%% {{{" "%%% }}}" " ")
(fold-add-to-marks-list 'lisp-mode ";;{{{" ";;}}}" "")
(fold-add-to-marks-list 'lex-mode" /* {{{ " " /* }}} */ " "*/")
(fold-add-to-marks-list 'html-mode "<!-- { " "<!-- } -->" "-->")
(fold-add-to-marks-list 'shell-script-mode "# {{{" "# }}}" nil)
(fold-add-to-marks-list 'sh-mode "# {{{ " "# }}}" nil)

;;}}}

;;{{{ template: Template Package for Emacs
(require 'template)
(template-initialize)
;;}}}

;;{{{ ange-ftp: remote file editing support
(setq ange-ftp-ftp-program-name "~/bin/ftp.exe")
(setq ange-ftp-tmp-name-template
      (concat (expand-file-name (getenv "TEMP")) "/ange-ftp"))
(setq ange-ftp-gateway-tmp-name-template
      (concat (expand-file-name (getenv "TEMP")) "/ange-ftp"))
;;}}}
