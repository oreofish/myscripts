;; -*- mode: Emacs-Lisp -*-
;; Time-stamp: <2012-03-15 22:11:34 Rick Xing>
;
; .emacs of Rick Xing
                                        ;

; F1 - ibuffer
; F2 - 2Column
; F3 - ffap
; F4 - delete-other-windows
; C-o - other-window
; C-j - iswitchb-buffer
; 
; F5 - replace-regex (c++)
; F6 - dired
; F7 - compile
; F8 - gdb
; 
; F9  - rename-buffer
; F10 - planner
; F11 - bookmark-set
; F12 - list-bookmarks
;
;; key binding
;; after .emacs is loaded,foreground/background face is overrided by
;; some mysterious guy, so i have to "F6" to reload .emacs :(
;;(defun load-my-emacs-conf ()
;;  "load ~/.emacs" (interactive)
;;  (load-file "~/.emacs"))


;;(setq outline-minor-mode-prefix [(control o)])


;;;; 引入系统变量
;; 输入法需要
(setenv "LC_CTYPE" "zh_CN.utf-8")
(setenv "EDITOR" "/usr/bin/emacs")

(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; remove menu bar
;(menu-bar-mode -1)

;; hide toolbar
(tool-bar-mode -1)

;; setup for newline auto-appending support
(setq next-line-add-newline t)

;; make the title infomation more useful
(if (= emacs-major-version 21)
    (setq frame-title-format "EMACS 21.4 - %b (%f)")
  (global-set-key [f8] 'gdb)
)
(if (= emacs-major-version 23)
  (global-set-key [f8] 'gdba)
)
(if (= emacs-major-version 22)
  (setq frame-title-format "EMACS 22.1 - %b (%f)")
)
(if (= emacs-major-version 23)
	(setq frame-title-format "EMACS 23 - %b (%f)")
)

;; setup up a big kill-ring, so i will never miss anything:-)
(setq kill-ring-max 50)

;; setup up for column number display in the mode line
(setq column-number-mode t)

;; set default mode to text-mode
(setq default-major-mode 'text-mode)

;; click mouse middle key to insert yank at cursor position, not mouse pointer
(setq mouse-yank-at-point t)

;; Stop this crazy blinking cursor
;(blink-cursor-mode -1)

;; because i cannot hear the bell.
(setq visible-bell t)

;; disable the welcome screen
(setq inhibit-startup-message t)

;; type y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; name the buffers have same file name in the forward way
(setq uniquify-buffer-name-style 'forward)

;; time stamp support
(setq time-stamp-active t)
(setq time-stamp-warn-inactive t)
(add-hook 'write-file-hooks 'time-stamp)
(setq time-stamp-format "%:y-%02m-%02d %02H:%02M:%02S Rick Xing")

;; bind M-/ to hippie-expand
(global-set-key [(meta ?/)] 'hippie-expand)
(setq hippie-expand-try-functions-list 
      '(try-expand-dabbrev
	try-expand-dabbrev-visible
	try-expand-dabbrev-all-buffers
	try-expand-dabbrev-from-kill
	try-complete-file-name-partially
	try-complete-file-name
	try-expand-all-abbrevs
	try-expand-list
	try-expand-line
	try-complete-lisp-symbol-partially
	try-complete-lisp-symbol))

;; backup settings
(setq version-control t)
(setq kept-old-versions 2)
(setq kept-new-versions 5)
(setq delete-old-versions t)
(setq backup-directory-alist '(("." . "~/backup")))
(setq backup-by-copying t)

;; setup various dot file's location
(setq bookmark-default-file "~/.emacs.d/_emacs.bmk")     
(setq custom-file "~/.emacs.d/_emacs.custom.el")

;; setup default user information
(setq user-full-name "Xing Jian")
(setq user-mail-address "oreofish@gmail.com")


;; after .emacs is loaded,foreground/background face is overrided by
;; some mysterious guy, so i have to "F6" to reload .emacs :(
;;(defun load-my-emacs-conf ()
;;  "load ~/.emacs" (interactive)
;;  (load-file "~/.emacs"))
;;(define-key global-map [f5] 'load-my-emacs-conf)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;gbk
;(setq w32-charset-info-alist
;    (cons '("gbk" w32-charset-gb2312 . 936) w32-charset-info-alist))

;for change default font size.
;(create-fontset-from-fontset-spec 
;  "-*-Courier New-normal-r-*-*-8-*-*-*-c-*-fontset-gbk,
;  chinese-gb2312:-adobe-courier-*-*-normal-*-8-*-*-*-*-*-*-*,
;  chinese-big5-1:-*-MingLiU-normal-r-*-*-12-*-*-*-c-*-big5-*,
;  chinese-big5-2:-*-MingLiU-normal-r-*-*-12-*-*-*-c-*-big5-*" t)

;(load-file "~/mule-gbk/chinese-gbk.el")
;(load-file "~/mule-gbk/fontset-gbk.el")

;; Setup GBK enviroment
;;(set-w32-system-coding-system 'chinese-gbk)
;(set-selection-coding-system 'chinese-gbk)
;(set-keyboard-coding-system 'chinese-gbk)
;(set-language-environment 'chinese-gbk)
;(;setq locale-coding-system 'chinese-gbk)
;(setq current-language-environment "Chinese-GBK")
;(setq coding-system-for-read 'chinese-gbk)
;(setq coding-system-for-write 'chinese-gbk)

;; Unicode support, for Emacs CVS (21.3.50) only
;(when (fboundp 'utf-translate-cjk-mode)
  ;; Load modified utf-translate-cjk-mode
;  (require 'gbk-utf-mode)
  ;; Turn on utf-translate-cjk-mode
;  (utf-translate-cjk-mode 1)
  ;; Setup X selection for unicode encoding
;  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

;(load-file "~/mule-gbk/characters-gbk.el")
;(set-default-font "-*-MS Song-normal-r-*-*-16-*-*-*-c-*-fontset-most")
;(set-default-font "-outline-Microsoft Sans Serif-normal-r-normal-normal-16-*-*-*-p-*-gb2312*-*")   

(set-frame-height (selected-frame) 59)
(set-frame-width (selected-frame) 139)
(set-frame-position (selected-frame) 0 0)
;(set-frame-font "Courier 10 Pitch-12")
(set-frame-font "Dejavu Sans Mono-9")
;(set-default-font "-misc-fixed-bold-r-normal--13-120-75-75-c-70-iso8859-1")

(load-file "~/.emacs.d/nxhtml/autostart.el")

;;;;;;;;;;;;;;;;;;;;;;;;;; install el-get ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil t)
  (url-retrieve
   "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
   (lambda (s)
     (end-of-buffer)
     (eval-print-last-sexp))))

;;;;;;;;;;;;;;;;;;;;;;coffee ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/el-get/coffee-mode")
(require 'coffee-mode)

;;;;;;;;;;;;;;;;;;;;; load other settings ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(load-file "~/.emacs.d/_emacs.tools.el")
;;(load-file "~/.emacs.d/_emacs.cygwin.el")
;;(load-file "~/.emacs.d/_emacs.wiki.el")
(load-file "~/.emacs.d/session.elc")
(load-file "~/.emacs.d/tabbar.elc")
(load-file "~/.emacs.d/swbuff.elc")
(load-file "~/.emacs.d/setnu.elc")
(load-file "~/.emacs.d/setnu-plus.elc")
(load-file "~/.emacs.d/browse-kill-ring.elc")
(load-file "~/.emacs.d/_emacs.modes.elc")
(load-file "~/.emacs.d/_emacs.calendar.elc")
;; (load-file "~/.emacs.d/p4.elc")

;;(load-file "~/.emacs.d/flymake.el")

;;;;;;;;;;;;ruby
(load-file "~/.emacs.d/inf-ruby.el")
(load-file "~/.emacs.d/snippet.el")
(load-file "~/.emacs.d/find-recursive.el")
(load-file "~/.emacs.d/ruby-electric.el")

;;说明ruby-mode模式调用哪个函数块
(autoload 'ruby-mode "ruby-mode"
      "Mode for editing ruby source files" t)
;;看到文件后缀为.rb的，对其使用ruby-mode模式，然后它会调用autoload中
;;指定的函数块
(setq auto-mode-alist
          (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
;;如果文件后缀名不为.rb，但是脚本第一行有#!ruby之类的说明
;;也相应调用此ruby模式
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                     interpreter-mode-alist))
;;调用inf-ruby
(autoload 'run-ruby "inf-ruby"
      "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
      "Set local key defs for inf-ruby in ruby-mode")
;;加载钩子
(add-hook 'ruby-mode-hook
          '(lambda ()
             (inf-ruby-keys)))
;;使用ruby-electric次模式
(require 'ruby-electric)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CEDET START;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'cedet)

;;;; Helper tools.  "load all emacs builtin cedet features needed by hand, so no external cedet needed"
(custom-set-variables
'(semantic-default-submodes (quote (global-semantic-decoration-mode
				    global-semantic-idle-completions-mode
				    global-semantic-idle-scheduler-mode
				    ;;global-semantic-highlight-func-mode
				    global-semantic-stickyfunc-mode
				    global-semanticdb-minor-mode
				    global-semantic-idle-summary-mode
				    global-semantic-mru-bookmark-mode)))
'(semantic-idle-scheduler-idle-time 3))
(semantic-mode t)
(setq semantic-idle-work-update-headers-flag t)

; smart complitions
(require 'semantic/ia)
(setq-mode-local c-mode semanticdb-find-default-throttle
'(project unloaded system recursive))
(setq-mode-local c++-mode semanticdb-find-default-throttle
'(project unloaded system recursive))

;;;; TAGS Menu
(defun my-semantic-hook ()
(imenu-add-to-menubar "TAGS"))

(add-hook 'semantic-init-hooks 'my-semantic-hook)

;;;; Semantic DataBase存储位置
(setq semanticdb-default-save-directory
(expand-file-name "~/.emacs.d/semanticdb"))

;;;;;;; 代码跳转
(require 'semantic/analyze/refs)

(defadvice push-mark (around semantic-mru-bookmark activate)
  "Push a mark at LOCATION with NOMSG and ACTIVATE passed to `push-mark'.
If `semantic-mru-bookmark-mode' is active, also push a tag onto
the mru bookmark stack."
  (semantic-mrub-push semantic-mru-bookmark-ring
                      (point)
                      'mark)
  ad-do-it)

(defun semantic-ia-fast-jump-back ()
  (interactive)
  (if (ring-empty-p (oref semantic-mru-bookmark-ring ring))
      (error "Semantic Bookmark ring is currently empty"))
  (let* ((ring (oref semantic-mru-bookmark-ring ring))
         (alist (semantic-mrub-ring-to-assoc-list ring))
         (first (cdr (car alist))))
    (if (semantic-equivalent-tag-p (oref first tag) (semantic-current-tag))
        (setq first (cdr (car (cdr alist)))))
    (semantic-mrub-switch-tags first)))





;; 使用 gnu global 的TAGS。
(require 'semantic/db-global)
(semanticdb-enable-gnu-global-databases 'c-mode)
(semanticdb-enable-gnu-global-databases 'c++-mode)

 ;; (global-senator-minor-mode 1)
 ;; (require 'semantic-decorate-include)

 ;; (require 'gtags)
 ;; (semanticdb-enable-gnu-global-databases 'c-mode)
 ;; (semanticdb-enable-gnu-global-databases 'c++-mode)

 ;;(setq semantic-complete-inline-analyzer-displayor-class
 ;;'semantic-displayor-tooltip)
 (setq semantic-complete-inline-analyzer-displayor-class
       'semantic-displayor-ghost)
 (defun my-cedet-hook ()
   (local-set-key [(meta return)] 'semantic-ia-complete-symbol)
   (local-set-key "\C-cm" 'semantic-ia-complete-tip)
   ;; (local-set-key "\C-c." 'senator-complete-symbol)

   (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
   (local-set-key "\C-c=" 'semantic-decoration-include-visit)

   (local-set-key "\C-cj" 'semantic-ia-fast-jump)
   (local-set-key "\C-co" 'semantic-mrub-switch-tags)
   (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle)
   (local-set-key "\C-ci" 'semantic-ia-show-doc)

   )

 (add-hook 'c-mode-common-hook 'my-cedet-hook)
 (add-hook 'lisp-mode-hook 'my-cedet-hook)
 (add-hook 'python-mode-hook 'my-cedet-hook)
 (add-hook 'ruby-mode-hook 'my-cedet-hook)
 (add-hook 'emacs-lisp-mode-hook 'my-cedet-hook)

;;;;;;;;;;;;;;;;;;;;;rails;;;;;;;;;;;;;;;;;;;;;;
(setq load-path (cons "~/.emacs.d/rails" load-path)) 
(require 'rails) 



;;;; Include settings
(require 'semantic/bovine/gcc)
(require 'semantic/bovine/c)

(defconst cedet-user-include-dirs
(list ".." "../include" "../inc" "../common" "../public" "."
"../.." "../../include" "../../inc" "../../common" "../../public"))

(setq cedet-sys-include-dirs (list
"/usr/include"
"/usr/include/bits"
"/usr/include/glib-2.0"
"/usr/include/gnu"
"/usr/include/gtk-2.0"
"/usr/include/gtk-2.0/gdk-pixbuf"
"/usr/include/gtk-2.0/gtk"
"/usr/local/include"
"/usr/local/include"))

(let ((include-dirs cedet-user-include-dirs))
(setq include-dirs (append include-dirs cedet-sys-include-dirs))
(mapc (lambda (dir)
(semantic-add-system-include dir 'c++-mode)
(semantic-add-system-include dir 'c-mode))
include-dirs))

(setq semantic-c-dependency-system-include-path "/usr/include/")

;; other header file directories
(setq qt4-base-dir "/usr/include/")
(dolist (path '("Qt" "QtCore" "QtGui" "QtNetwork" "QtDBus" "QtMultimedia"
                "QtXmlPatterns" "QtXml" "QtWebKit" "QtScript" "QtSql" "QtTest"
                "QtAssistant" "QtOpenGL" "QtSvg" "Qt3Support"))
(semantic-add-system-include (concat qt4-base-dir path) 'c++-mode))

(if (not (boundp 'semantic-lex-c-preprocessor-symbol-file))
   (setq semantic-lex-c-preprocessor-symbol-file
          '("/usr/include/c++/4.6.0/i686-pc-linux-gnu/bits/c++config.h")))

 (mapcar
  (lambda (path) (add-to-list 'semantic-lex-c-preprocessor-symbol-file path))
  (list (concat qt4-base-dir "/Qt/qconfig.h")
        (concat qt4-base-dir "/Qt/qconfig-dist.h")
        (concat qt4-base-dir "/Qt/qglobal.h")))
 ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file
 ;;              (concat qt4-base-dir "/Qt/qconfig.h"))
 ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file
 ;;              (concat qt4-base-dir "/Qt/qconfig-dist.h"))
 ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file
 ;;              (concat qt4-base-dir "/Qt/qglobal.h"))


 (setq gtags-mode-hook
       '(lambda ()
          (setq gtags-pop-delete t)
          (setq gtags-path-style 'absolute)
          (local-set-key "\M-." 'gtags-find-tag-from-here)))

;; Enable EDE (Project Management) features
 (global-ede-mode t)
 (ede-cpp-root-project "rails-sample"
                       :name "rails-sample"
                       :file "~/git/sample/README"
                       :include-path '("/app"
                                       "/config"
                                       "/script"
                                       "/spec"
                                       "/lib"))
; (ede-cpp-root-project "sourceinsight"
;                       :name "sinsight"
;                       :file "~/data/stage/sourceinsight/CMakeLists.txt"
;                       :include-path '("/"))
;
; (ede-cpp-root-project "loopy"
;                       :name "loopy"
;                       :file "~/data/stage/loopy-github/CMakeLists.txt"
;                       :include-path '("/src"))
;
; (ede-cpp-root-project "qtetris"
;                       :name "qtetris"
;                       :file "~/data/stage/qtetris/Makefile"
;                       :include-path '("/"))
; )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CEDET END ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;(load-file "~/.emacs.d/mc.el")
;(load-file "~/.emacs.d/nc.el")
(load-file custom-file)


;(load-file "~/.emacs.d/eshell-tab.el")
;(require 'eshell-tab)

;; (require 'swbuff)
;; (global-set-key (kbd "M-j") 'swbuff-switch-to-previous-buffer)
;; (setq swbuff-exclude-buffer-regexps 
;;      '("^ " "\\*.*\\*" ".*\\..*"))
;; (setq swbuff-status-window-layout 'scroll)
;; (setq swbuff-clear-delay 0)
;; (setq swbuff-separator "|")
;; (setq swbuff-window-min-text-height 0)
;; 
;;line space
(custom-set-variables
 '(load-home-init-file t t))

;; kill whole line 
(setq kill-whole-line t)

;; setup parentheses handling
(setq show-paren-delay 1)
;; turn Transient Mark mode off, to exchange-point-and-mark nicely
; (transient-mark-mode -1)
(transient-mark-mode t)
;; parenthese-showing policies
(setq show-paren-mode t)
;;(setq show-paren-style 'parenthesis)
(setq show-paren-style 'expression)

;; type "C-%" over paren to find the matched paren, similar to vi.          
(global-set-key  [(control %)] 'match-paren)
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
	((looking-at "\\s\)") (forward-char 1) (backward-list 1))))

;; insert a empty c main()
(defun insert-cmain ()
  "Adds an empty main routine." (interactive)
  (let ((stuff (concat "#include <stdio.h>
#include <unistd.h>

int main(int argc, char* argv[])
{
	
	return 0;
}\n")))
    (insert stuff)
    (previous-line 3)
    (c-indent-command)))

;; insert a empty c++ main()
(defun insert-cppmain ()
  "Adds an empty main routine." (interactive)
  (let ((stuff (concat "#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <string>

using namespace std;

int main(int argc, char* argv[])
{
    
    return 0;
}\n")))
    (insert stuff)
    (previous-line 3)
    (c-indent-command)))

;; insert a sleep broken
(defun insert-sleep ()
  "Adds an sleep while routine." (interactive)
  (let ((stuff (concat "  {
  int i=1;
  while(i)
    sleep(i);
  }\n")))
    (insert stuff)
    (c-indent-command)))

;; insert a empty comment block
(defun insert-comment ()
  "Adds an empty comment block." (interactive)
  (let ((stuff (concat "  /**\n   *\n   *\n   */\n")))
    (insert stuff)
    (previous-line 3)
    (c-indent-command)))

;; turn on image file support
(auto-image-file-mode)

;; Just cos I'm lazy, set up selection & keys like Windows.
(delete-selection-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; set TODO
(setq todo-file-do "~/.emacs.d/todo/do")
(setq todo-file-done "~/.emacs.d/todo/done")
(setq todo-file-top "~/.emacs.d/todo/top")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Diary
(setq diary-file "~/.emacs.d/diary")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; display time and mail notify icon on mode line
(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-use-mail-icon t)
(setq display-time-interval 10)

;; session support
(require 'session)
(add-hook 'after-init-hook 'session-initialize)
(setq session-save-file "~/.emacs.d/.session")

;; desktop support
(load "desktop")
(setq desktop-base-file-name "~/.emacs.d/_emacs.desktop")
(setq desktop-path '("." "~/.emacs.d"))
(setq desktop-enable t)
(desktop-load-default)
(desktop-read)

;; stardict
(defun current-word-hook ()
  "get word from point"
  (shell-command (format "ls") t)
)
(global-set-key (kbd "M-[") 'current-word-hook)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BEGIN WIN32 SPECIFIC SETTING
;;; functiones to manipulate windows
;(defun w32-restore-frame ()
;    "Restore a minimized frame"
;     (interactive)
;     (w32-send-sys-command 61728))
;(defun w32-maximize-frame ()
;    "Maximize the current frame"
;     (interactive)
;     (w32-send-sys-command 61488))
;;; Maximum Windows Frame 
;(w32-maximize-frame)
;;; END WIN32 SPECIFIC SETTING

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BEGIN MISC SETTING
(setq-default case-fold-search t)
(setq-default comment-column 40)
(setq-default fill-column 64)

(setq max-specpdl-size 1000)
(setq auto-save-interval 100)
(setq search-highlight t)
(setq query-replace-highlight t)
(setq enable-recursive-minibuffers t)
(setq insert-default-directory nil)
(setq bookmark-save-flag 1)

;; syntax highlighting
;(cond ((fboundp 'global-font-lock-mode)
;       (global-font-lock-mode t)
;       (setq font-lock-maximum-decoration t)))
;(setq font-lock-support-mode 'fast-lock-mode)
;(setq font-lock-cache-directories '("~/.emacs.d/flc"))

;; read saved abbrev file
;;(read-abbrev-file)

;; support compressed file
(auto-compression-mode)

;; enhanced change buffer
(iswitchb-mode)

;; backup policies
(setq make-backup-files t)
(setq version-control t)
(setq kept-old-versions 2)
(setq kept-new-versions 5)
(setq delete-old-versions t)
(setq backup-directory-alist '(("" . "/tmp/xjsrc")))

(setq blink-matching-paren t)

;; display timer
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(display-time)

;; dont want speed bar to group tags
(set-variable 'speedbar-tag-hierarchy-method nil)

;; enable highlighted text deletion
(delete-selection-mode t)
 
;; display line and column number
(setq column-number-mode t)
(setq line-number-mode t)

;; highlight marked block
(setq transient-mark-mode t)

(which-func-mode)

;; color scheme
(setq default-frame-alist
 '(
;;   (foreground-color . "black")
   (foreground-color . "Wheat")
   (background-color . "DarkSlateGray")
;;   (background-color . "lightgoldenrod2")
   (cursor-color     . "Orchid")
   )
)

;;--------------------------------------------------------------------
;; faces
;;--------------------------------------------------------------------
;; background/foreground
;;(set-face-background 'default "midnightblue")
;;(set-face-foreground 'default "white")
;; parent match
;(set-face-background 'show-paren-match-face "DarkSlateGray4") 

;;; END MISC SETTING

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BEGIN PROGRAMMING MODE SETTING

;; hippie-expand-try-list
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-expand-list
        try-expand-list-all-buffers
        try-expand-line
        try-expand-line-all-buffers
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-whole-kill
        )
      )

;;; load required libraries
(autoload 'python-mode "python-mode" "Python editing mode." t)
(autoload 'ruby-mode "ruby-mode" "Ruby editing mode." t)
;(autoload 'gnugo "gnugo" "GNU Go" t)
(load-file "~/.emacs.d/gnugo.elc")

;;(require 'tex-site)

;; one key compile
(setq compile-command "make")
(setq compilation-window-height 20)
(defun onekey-compile ()
  "Switch to the other buffer (2nd in list-buffer) in
current window."                                      
  (interactive)
  (compile compile-command)
;;  (switch-to-buffer (other-buffer))
  (switch-to-buffer "*compilation*")
  (end-of-buffer)
)

;; cscope.代码跳转etags基本不用，cscope基本上可以满足的
;(require 'xcscope)

(require 'cc-mode)
(c-set-offset 'inline-open 0)
(c-set-offset 'friend '-)
;;(c-set-offset 'substatement-open 0)

;; C  mode
(add-hook 'c-mode-hook 'hs-minor-mode)
(defun my-c-mode-common-hook ()
  (setq tab-width 4 indent-tabs-mode nil)
;;; we like auto-newline and hungry-delete
  (c-toggle-auto-hungry-state 1)
;;; (define-key c-mode-base-map "\C-m" 'c-context-line-break)
  (define-key c-mode-base-map [(control \`)] 'hs-toggle-hiding)
  (define-key c-mode-base-map [(return)] 'newline-and-indent)
  (define-key c-mode-base-map [(f7)] 'compile)
  (define-key c-mode-base-map [(control tab)] 'c-indent-command)
  (define-key c-mode-base-map [(tab)] 'hippie-expand)
;;; preprocessor
  (setq c-macro-shrink-window-flag t)
  (setq c-macro-preprocessor "cpp")
  (setq c-macro-cppflags " ")
  (setq c-macro-prompt-flag t)
  (setq hs-minor-mode t)
  (setq abbrev-mode t)
;;; auto add pair
  (make-local-variable 'skeleton-pair-alist) 
  (setq skeleton-pair-alist  '(
    (?\" _ ?\")
    (?\' _ ?\')
    (?\( _ ?\)) 
    (?\[  _ ?\])
    (?{ \n >  _ \n ?} >)))
  (setq skeleton-pair t)
  (local-set-key (kbd "(") 'skeleton-pair-insert-maybe)
  (local-set-key (kbd "{") 'skeleton-pair-insert-maybe)
  (local-set-key (kbd "'") 'skeleton-pair-insert-maybe)
  (local-set-key (kbd "\"") 'skeleton-pair-insert-maybe)
  (local-set-key (kbd "[") 'skeleton-pair-insert-maybe)
  )

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;;;;; C-mode-hooks 对于C和C++的struct/class结构，函数semantic-complete-self-insert 可以插入类或结构中的成员变量，将至绑定到"."或者">"，会加速代码编写的效率
;(defun yyc/c-mode-keys ()
;"description"
;;; Semantic functions.
;(semantic-default-c-setup)
;(local-set-key "/C-c?" 'semantic-ia-complete-symbol-menu)
;(local-set-key "/C-cb" 'semantic-mrub-switch-tags)
;(local-set-key "/C-cR" 'semantic-symref)
;(local-set-key "/C-cj" 'semantic-ia-fast-jump)
;(local-set-key "/C-cp" 'semantic-ia-show-summary)
;(local-set-key "/C-cl" 'semantic-ia-show-doc)
;(local-set-key "/C-cr" 'semantic-symref-symbol)
;(local-set-key "/C-c/" 'semantic-ia-complete-symbol)
;(local-set-key [(control return)] 'semantic-ia-complete-symbol)
;(local-set-key "." 'semantic-complete-self-insert)
;(local-set-key ">" 'semantic-complete-self-insert)
;;; Indent or complete
;(local-set-key [(tab)] 'indent-or-complete)
;)
;(add-hook 'c-mode-common-hook 'yyc/c-mode-keys)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; for binding [return] to 'newline-and-indent function
;;; disable autobackup

;;; for c++ mode
(defun my-c++-mode-hook()
  (setq tab-width 4 indent-tabs-mode nil)
  (c-set-style "stroustrup")
  (define-key c++-mode-map [f3] 'replace-regexp)
  )
        
(add-hook 'c++-mode-hook 'my-c++-mode-hook)

;;; for java mode
(defun my-java-mode-hook()
  (setq tab-width 4 indent-tabs-mode nil)
  )

(add-hook 'java-mode-hook 'my-java-mode-hook)

;;; for ruby mode
(setq load-path (cons "~/.emacs.d/rdebug" load-path))
(require 'rdebug)

(setq interpreter-mode-alist (
                              append '(("ruby" . ruby-mode))
                                     interpreter-mode-alist))

(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")

(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")

(autoload 'rubydb "rubydb3x" "Debug ruby db")

(add-hook 'ruby-mode-hook '(lambda () (inf-ruby-keys) ))

;;; for csharp mode
;;(autoload 'csharp-mode "cc-mode")

(defun retate-windows ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((wl    (window-list))
             (w1    (frame-first-window))
             (w2    (if (equal w1 (car wl)) (cadr wl) (car wl)))
             (b1    (window-buffer w1))
             (b2    (window-buffer w2))
             (first (if (equal (current-buffer) b1) t nil)))
        (if (= (window-width) (frame-width))
            (split-window-horizontally)
          (split-window-vertically))
        (other-window 2)
        (delete-window)
        (switch-to-buffer b1)
        (other-window 1)
        (switch-to-buffer b2)
        (when first (other-window 1)))
    (message "There are not exactly 2 windows.")))

(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

(require 'ido)
;;;xxx(ido-mode t)

(global-set-key [(control ?\.)] 'ska-point-to-register)
(global-set-key [(control ?\,)] 'ska-jump-to-register)
(defun ska-point-to-register()
  "Store cursorposition _fast_ in a register.
Use ska-jump-to-register to jump back to the stored
position."
  (interactive)
  (setq zmacs-region-stays t)
  (point-to-register 8))

(defun ska-jump-to-register()
  "Switches between current cursorposition and position
that was stored with ska-point-to-register."
  (interactive)
  (setq zmacs-region-stays t)
  (let ((tmp (point-marker)))
        (jump-to-register 8)
        (set-register 8 tmp)))

(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(defun wy-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `wy-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
		     char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event)))

(define-key global-map (kbd "C-c a") 'wy-go-to-char)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; extension to mode mapping
;;;
(setq auto-mode-alist
      (append '(
                ("\\.py$" . python-mode)
                ("\\.rb$" . ruby-mode)
                ("\\.cs$" . csharp-mode)
                ("\\.h$" .  c++-mode)
                ("\\.hpp$" . c++-mode)
                ("\\.c$" . c++-mode)
                ("\\.scss$" . css-mode)
                ) auto-mode-alist ))

(require 'compile)

;;; compiler error message support

;;; support csc.exe from .net framework sdk

(setq compilation-error-regexp-alist
      (append 
;;; sample
;;; tt.cs(5,14): error CS1585: Member modifier 'static' must precede the member type and name
       (cons '("\\(.*\\)(\\([0-9]+\\),\\([0-9]+\\)): \\(error\\|warning\\) CS[0-9]+:" 1 2 3) ())
       compilation-error-regexp-alist
       )
)

;(defun wcy-shell-mode-auto-rename-buffer ()
;  (if (eq major-mode 'eshell-mode)
;      (rename-buffer  (concat "eshell: " (eshell/pwd)) t)))
;(add-hook 'eshell-directory-change-hook 'wcy-shell-mode-auto-rename-buffer)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;eshell config
;;REMEMBER delete these two lines in eshell
;;(define-key eshell-mode-map [(control ?j)] 'eshell-send-input)
;;(define-key eshell-mode-map [(control ?j)] 'exit-minibuffer)
;;(define-key eshell-command-map [(control ?o)] 'eshell-kill-output)

;; use scroll instead skip in eshell-mode
(defun eshell-scroll-to-bottom (window display-start)
  (if (and window (window-live-p window))
      (let ((resize-mini-windows nil))
	(save-selected-window
	  (select-window window)
	  (save-restriction
	    (widen)
	    (when (> (point) eshell-last-output-start) ; we're editing a line. Scroll.
	      (save-excursion
		(recenter -1)
		(sit-for 0))))))))

(defun eshell-add-scroll-to-bottom ()
  (interactive)
  (make-local-hook 'window-scroll-functions)
  (add-hook 'window-scroll-functions 'eshell-scroll-to-bottom nil t))

(add-hook 'eshell-mode-hook 'eshell-add-scroll-to-bottom)

;; not back to line head
(add-hook 'eshell-mode-hook
	  (lambda ()
		 (local-set-key[home] 'eshell-backward-argument)))

;; view shell cmd in visual mode
(add-hook 'eshell-first-time-mode-hook
            (lambda ()
             (setq eshell-visual-commands (append
           '("vim" "screen" "lftp")
             eshell-visual-commands))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BEGIN PRINTER SETTING
; (setq printer-name "LPT1:")
;;; print via ghostscript
; (setq ps-printer-name t)
; (setq ps-lpr-command "gswin32c")
; (setq ps-lpr-switches '("-q" "-dNOPAUSE" "-"))
;;; END PRINTER SETTING

;;; Xrefactory configuration part ;;
;;; some Xrefactory defaults can be set here
;(defvar xref-current-project nil) ;; can be also "my_project_name"
;(defvar xref-key-binding 'global) ;; can be also 'local or 'none
;(setq load-path (cons "/backup/tools/xref/emacs" load-path))
;(setq exec-path (cons "/backup/tools/xref" exec-path))
;(load "xrefactory")
;;; end of Xrefactory configuration part ;;
;(message "xrefactory loaded")
;

;;--------------------------------------------------------------------
;; scroll without moving cursors
;;--------------------------------------------------------------------
(defun scroll-down-keep-cursor-pos ()
   ;; Scroll the text one line down while keeping the cursor
  (interactive)
  (scroll-down 1))

(defun scroll-up-keep-cursor-pos ()
   ;; Scroll the text one line up while keeping the cursor
   (interactive)
   (scroll-up 1))
(defun scroll-down-keep-cursor-line ()
   ;; Scroll the text one line down while keeping the cursor pointed line
   (interactive)
   (scroll-down 1)
   (next-line 1))

(defun scroll-up-keep-cursor-line ()
   ;; Scroll the text one line up while keeping the cursor pointed line
   (interactive)
   (scroll-up 1)
   (next-line -1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Bind the functions to the /-key and the *-key (on the numeric keypad) with:
(global-set-key [f1] 'ibuffer)
(global-set-key [f2] 'ffap)
(global-set-key [f3] 'replace-regexp)
(global-set-key [f4] 'delete-other-windows)
(global-set-key [f5] 'toggle-read-only)
(global-set-key [f6] 'onekey-compile)
(global-set-key [f7] 'compile)
(global-set-key [f9] 'rename-buffer)
(global-set-key [f11] 'bookmark-set)

(global-set-key [f12] 'yic-other-buffer)
;; (global-set-key [f12] 'list-bookmarks)

(global-set-key [(meta s)] 'shell-command)
(global-set-key [(control q)] 'speedbar)
(global-set-key [(meta g)] 'goto-line)
(global-set-key (kbd "M-<SPC>") 'set-mark-command)
(global-set-key "\M-j" 'beginning-of-buffer)
(global-set-key "\M-k" 'end-of-buffer)

;(global-set-key (kbd "C-z") 'set-mark-command)

;; should do these changes in lisp/
;;   eshell.el:380:  (define-key eshell-mode-map [(con trol ?j)] 'exit-minibuffer)
;;   esh-mode.el:317:  (define-key eshell-mode-map [(con trol ?j)] 'eshell-send-input)
;;   dired.el: (define-key map "\C-o" 'dired-display-file)

;(global-set-key [(meta o)] 'open-line)
(global-set-key [(control o)] 'other-window)
(global-set-key [(control j)] 'iswitchb-buffer )
(global-set-key [(control s)] 'isearch-forward-regexp)
(global-set-key [(control meta s)] 'isearch-forward)
(global-set-key [(control r)] 'isearch-backward-regexp)
(global-set-key [(control meta r)] 'isearch-backward)
(global-set-key [(control \\)] 'kill-buffer)
(global-set-key [kp-divide] 'scroll-down-keep-cursor-pos)
(global-set-key [kp-multiply] 'scroll-up-keep-cursor-pos) 
(global-set-key "\M-I" 'scroll-down-keep-cursor-line)
(global-set-key "\M-K" 'scroll-up-keep-cursor-line) 
(define-key global-map [(control down)] 'scroll-up-keep-cursor-line)
(define-key global-map [(control up)] 'scroll-down-keep-cursor-line) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; full screen
(add-to-list 'default-frame-alist '(height . 56))
(add-to-list 'default-frame-alist '(width . 200))


;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))
